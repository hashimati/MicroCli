package ${controllerPackage}

import io.micronaut.http.annotation.*
import ${entityPackage}
import ${servicePackage}
import javax.inject.Inject;
import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.responses.ApiResponse
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
@Controller("/api/${entities}")
class ${className}Controller {


    @Inject
    lateinit var ${entityName}Service: ${className}Service

    @Post("/save")
    @Post("/save")
    @Operation(summary = "Creating a ${entityName} and Storing in the database",
            description = "A REST service, which saves ${className} objects to the database."
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Object Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not stored")
    fun save(@Body ${entityName}: ${className}):  ${className} {

        log.info("Saving ${className} :{}", ${entityName})
        return ${entityName}Service.save(${entityName})
    }


    @Get("/get")
    @Operation(summary = "Getting a ${entityName} by Id",
        description = "A REST service, which retrieves a ${className} object by Id."
    )
    @ApiResponse(
        content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Id Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not found")
    fun findById(id:Long): ${className} {
        log.info("Finding ${className}: {}", id )
        return ${entityName}Service.findById(id)
    }

    @Delete("/delete/{id}")
    @Operation(summary = "Deleting a ${entityName} by ID",
            description = "A REST service, which deletes ${className} object from the database."
    )
    @ApiResponse(
            content = @Content(mediaType = "boolean")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Id Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not found")
    fun deleteById(id:Long): Boolean {
        log.info("Deleting ${className}: {}", id)
        return  ${entityName}Service.deleteById(id)
    }

    @Get("/findAll")
    @Operation(summary = "Retrieving all ${entityName} objects as Json",
            description = "A REST service, which returns all ${className} objects from the database."
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    fun findAll():Iterable<${className}>{
        log.info("find All")
        return ${entityName}Service.findAll()
    }

    @Put("/update")
    @Operation(summary = "Updating a ${entityName}.",
            description = "A REST service, which update a ${className} objects to the database."
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "404", description = "${className} not found")
    fun update(@Body ${entityName}: ${className}>):${className}>
    {
        log.info("update {}", ${entityName})
        return ${entityName}Repository.update(${entityName})

    }
    companion object {
            val log :Logger = LoggerFactory.getLogger(${className}Controller::class.java)
        }
 }