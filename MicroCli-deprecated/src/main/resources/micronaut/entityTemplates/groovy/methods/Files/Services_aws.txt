

    @Timed(value = "${mainPackage}.${entity}Service.upload${attributeCap}", percentiles = [ 0.5, 0.95, 0.99 ], description = "Uploading ${attributeCap} file")
    String upload${attributeCap}(${idType} id, CompletedFileUpload file)
    {
        String key = "${attributeCap}."+file.getContentType().get().getExtension()
        ${entityCap} ${entity} = ${entity}Repository.findById(id)${block}
        ${entity}.set${attributeCap}(key)
        ${entityCap} updateResult = ${entity}Repository.update(${entity})${updateBlock}
        String result = "Failed"
        if(!updateResult.get${attributeCap}().equals(key)) return result
        com.amazonaws.services.s3.model.ObjectMetadata metaData = new com.amazonaws.services.s3.model.ObjectMetadata()
        metaData.setContentLength(file.getSize())
        try {
            result =  fileService.createFile("${entityCap}",key, file.getInputStream(), metaData)

        } finally {
            return result

        }

    }

    @Timed(value = "${mainPackage}.${entity}Service.download${attributeCap}", percentiles = [ 0.5, 0.95, 0.99 ], description = "Downloading ${attributeCap} file")
    io.micronaut.http.server.types.files.StreamedFile download${attributeCap}(${idType} id)
    {
        ${entityCap} ${entity} = ${entity}Repository.findById(id)${block}
        return fileService.OutputStreamFile("${mainPackage}.${entityCap}", ${entity}.get${attributeCap}(), ${entity}.get${attributeCap}())
    }

    @Timed(value = "${mainPackage}.${entity}Service.delete${attributeCap}", percentiles = [ 0.5, 0.95, 0.99 ], description = "Deleting ${attributeCap} file")
    String delete${attributeCap}(${idType} id) {
        String deleteFileResult = fileService.deleteFile("${mainPackage}.${entityCap}",${entity}Repository.findById(id)${block}.get${attributeCap}())
        if(deleteFileResult.equalsIgnoreCase("Failed")) return "Failed"
        ${entityCap} ${entity} = ${entity}Repository.findById(id)${block}
        ${entity}.set${attributeCap}("")
        ${entityCap} ${entity}Update = ${entity}Repository.update(${entity})${updateBlock}
        return deleteFileResult
    }