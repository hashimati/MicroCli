plugins {
    id "org.asciidoctor.jvm.convert" version "3.2.0"
    id "com.diffplug.eclipse.apt" version "3.22.0"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "application"
}

version "0.1.5"
group "io.hashimati.microcli"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    annotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-validation")
    annotationProcessor("io.micronaut:micronaut-graal")
    annotationProcessor("info.picocli:picocli-codegen")
    compileOnly(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    compileOnly("org.graalvm.nativeimage:svm")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("info.picocli:picocli")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.picocli:micronaut-picocli")
    implementation("javax.annotation:javax.annotation-api")
    runtimeOnly("ch.qos.logback:logback-classic")
    testAnnotationProcessor(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testAnnotationProcessor("io.micronaut:micronaut-inject-java")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
// https://mvnrepository.com/artifact/com.esotericsoftware.yamlbeans/yamlbeans
    implementation 'com.esotericsoftware.yamlbeans:yamlbeans:1.15'

    // https://mvnrepository.com/artifact/org.openrewrite/rewrite-yaml
    runtimeOnly 'org.openrewrite:rewrite-yaml:7.15.0'


    compile group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
// https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.7'
// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
// https://mvnrepository.com/artifact/com.google.googlejavaformat/google-java-format
    compile group: 'com.google.googlejavaformat', name: 'google-java-format', version: '1.7'
// https://mvnrepository.com/artifact/eu.bitwalker/UserAgentUtils
    compile group: 'eu.bitwalker', name: 'UserAgentUtils', version: '1.21'
// https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.11.0'
// https://mvnrepository.com/artifact/org.atteo/xml-combiner
    compile group: 'org.atteo', name: 'xml-combiner', version: '2.2'
// https://mvnrepository.com/artifact/com.github.bmoliveira/snake-yaml
//	compile group: 'com.github.bmoliveira', name: 'snake-yaml', version: 'v1.18-android'
    compile group: 'com.querydsl', name: 'querydsl-collections', version: '4.4.0'

    implementation "org.fusesource.jansi:jansi:1.18"
    implementation "org.yaml:snakeyaml:1.26"
    // https://mvnrepository.com/artifact/org.jline/jline
// https://mvnrepository.
//
// com/artifact/info.picocli/picocli-shell-jline3
    // compile group: 'info.picocli', name: 'picocli-shell-jline3', version: '4.1.4'
    implementation group: 'de.codeshelf.consoleui', name: 'consoleui', version: '0.0.13'
    implementation 'jline:jline:2.14.6'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

    compile 'org.apache.commons:commons-text:1.8'
    // https://mvnrepository.com/artifact/org.codehaus.groovy/groovy-templates
    compile group: 'org.codehaus.groovy', name: 'groovy-templates', version: '3.0.4'
// https://mvnrepository.com/artifact/org.yaml/snakeyaml
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.26'

    // https://mvnrepository.com/artifact/org.apache.maven/maven-core
    implementation 'org.apache.maven:maven-core:3.8.2'
// https://mvnrepository.com/artifact/org.apache.maven/maven-model
    implementation 'org.apache.maven:maven-model:3.8.2'
// https://mvnrepository.com/artifact/org.apache.maven/maven-artifact
    implementation 'org.apache.maven:maven-artifact:3.8.2'
    // https://mvnrepository.com/artifact/org.apache.maven/maven-plugin-api
    implementation 'org.apache.maven:maven-plugin-api:3.8.2'
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.16.1'
    implementation 'com.github.javaparser:javaparser-core:3.16.1'
    implementation 'com.github.javaparser:javaparser-core-serialization:3.16.1'
    // https://mvnrepository.com/artifact/io.leego/banana
    implementation group: 'io.leego', name: 'banana', version: '2.1.0'
    implementation 'com.querydsl:querydsl-apt:5.0.0'
    implementation 'com.querydsl:querydsl-collections:5.0.0'

    implementation 'io.vavr:vavr:1.0.0-alpha-4'
    implementation 'fr.jcgay.send-notification:send-notification:0.16.0'
}

test.classpath += configurations.developmentOnly

mainClassName = "io.hashimati.microcli.MicroCliCommand"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
    targetCompatibility = JavaVersion.toVersion('11')
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
        '-parameters',
        // enables incremental compilation
        '-Amicronaut.processing.incremental=true',
        '-Amicronaut.processing.annotations=io.hashimati.microcli.*',
        "-Amicronaut.processing.group=$project.group",
        "-Amicronaut.processing.module=$project.name",
    ])
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart':'true',
            'micronaut.io.watch.enabled':'true',
            "micronaut.io.watch.paths":"src/main"
        )
    }
}

apply from: 'gradle/asciidoc.gradle'

