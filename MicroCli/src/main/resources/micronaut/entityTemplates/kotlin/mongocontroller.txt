package ${controllerPackage}


import io.micronaut.context.annotation.Parameter
import io.micronaut.http.annotation.*

import io.micronaut.scheduling.TaskExecutors;
import io.micronaut.scheduling.annotation.ExecuteOn;
<% if(principle) out.print 'import io.micronaut.security.annotation.Secured;'%>
<% if(principle) out.print 'import java.security.Principal' %>
<% if(principle) out.print 'import io.micronaut.security.rules.SecurityRule' %>
<% if(header) out.print 'import static io.micronaut.http.HttpHeaders.AUTHORIZATION'%>
import jakarta.inject.Inject
<% print reactor? "import reactor.core.publisher.Flux" : "import io.reactivex.Flowable" %>
<% print reactor? "import reactor.core.publisher.Mono" : "import io.reactivex.Single" %>
<% print reactor? "import reactor.core.publisher.Mono" : "import io.reactivex.Single" %>
import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.responses.ApiResponse
import ${entityPackage}
import ${servicePackage}
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed;' %>
<% if(jaeger) out.print 'import io.micronaut.tracing.annotation.NewSpan;' %>
<% if(jaeger) out.print 'import io.micronaut.tracing.annotation.SpanTag;' %>
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
${moreImports}
<% if(jaxrs) out.print 'import javax.ws.rs.*;'%>

@ExecuteOn(TaskExecutors.IO)
<% if(!jaxrs) out.print '@Controller'%><% if(jaxrs) out.print '@Path'%>("/api/v1/${entityName}")
class ${className}Controller(private val ${entityName}Service: ${className}Service) {

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.save", description = "Observing all service metric for saving '+entityName+' object")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Post'%><% if(jaxrs) out.print '@POST @Path'%>("/save")
    @Operation(summary = "Creating a ${entityName} and Storing in the database",
            description = "A REST service, which saves ${className} objects to the database."
    )
    @ApiResponse(
            content = [Content(mediaType = "application/json")]
    )
    fun save(<% if(jaeger) out.print '@SpanTag("save.'+entityName+'")'%> @Body ${entityName}:${className}<% if(principle) out.print ', principle:Principal '%> <% if(header) out.print ',  @Header("Authorization")authorization:String '%>):<% print reactor? "Mono" : "Single" %><${className}>
    {
        log.info("Saving ${className}: {}", ${entityName} )

        return ${entityName}Service.save(${entityName}<% if(principle) out.print ', principle'%> <% if(header) out.print ', authorization'%>)
    }

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.findById", description = "Observing all service metric for finding a '+entityName+' object by id")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Get'%><% if(jaxrs) out.print '@GET @Path'%>("/get")
    @Operation(summary = "Getting a ${entityName} by Id",
        description = "A REST service, which retrieves a ${className} object by Id."
    )
    @ApiResponse(
        content = [Content(mediaType = "application/json")]
    )
    fun findById(<% if(jaeger) out.print '@SpanTag("findById.id")'%> @Parameter("id")  id: String<% if(principle) out.print ', principle:Principal '%> <% if(header) out.print ',  @Header("Authorization")authorization:String '%>):<% print reactor? "Mono" : "Single" %><${className}> {
        log.info("Finding ${className} by Id: {}", id)
        return ${entityName}Service.findById(id<% if(principle) out.print ', principle'%> <% if(header) out.print ', authorization'%>)
    }


   <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
   <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.findAll", description = "Observing all service metric for finding all '+entityName+' objects")' %>
   <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
   <% if(!jaxrs) out.print '@Get'%><% if(jaxrs) out.print '@GET @Path'%>("/findAll")
   @Operation(summary = "Retrieving all ${entityName} objects as Json",
            description = "A REST service, which returns all ${className} objects from the database."
    )
    @ApiResponse(
            content = [Content(mediaType = "application/json")]
    )
    fun findAll(<% if(principle) out.print 'principle:Principal '%> <% if(header) out.print ',  @Header("Authorization")authorization:String '%>):<% print reactor? "Flux" : "Flowable" %><${className}>{
        log.info("Finding All ${className}")
        return ${entityName}Service.findAll(<% if(principle) out.print 'principle'%> <% if(header) out.print ', authorization'%>)
    }

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.update", description = "Observing all service metric for update a '+entityName+' object")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Put'%><% if(jaxrs) out.print '@PUT @Path'%>("/update")
    @Operation(summary = "Updating a ${entityName}.",
           description = "A REST service, which update a ${className} objects to the database."
    )
    @ApiResponse(
           content = [Content(mediaType = "application/json")]
    )
    fun update(<% if(jaeger) out.print '@SpanTag("update.'+entityName+'")'%> @Body ${entityName}: ${className}<% if(principle) out.print ', principle:Principal '%> <% if(header) out.print ',  @Header("Authorization")authorization:String '%>):<% print reactor? "Mono" : "Single" %><${className}> {
        log.info("Deleting ${className} by id:{}", ${entityName})
        return ${entityName}Service.update(${entityName}<% if(principle) out.print ', principle'%> <% if(header) out.print ', authorization'%>)
    }

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.deleteById", description = "Observing all service metric for deleting a '+entityName+' object by id")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Delete'%><% if(jaxrs) out.print '@DELETE @Path'%>("/delete/{id}")
    @Operation(summary = "Deleting a ${entityName} by ID",
            description = "A REST service, which deletes ${className} object from the database."
    )
    @ApiResponse(
            content = [Content(mediaType = "boolean")]
    )
    fun deleteById(<% if(jaeger) out.print '@SpanTag("deleteById.id")'%> @PathVariable("id") id:Long<% if(principle) out.print ', principle:Principal '%> <% if(header) out.print ',  @Header("Authorization")authorization:String '%>): Boolean {
        log.info("Deleting ${className}: {}", id)
        return  ${entityName}Service.deleteById(id<% if(principle) out.print ', principle'%> <% if(header) out.print ', authorization'%>)
    }
${methods}

    companion object {
            val log :Logger = LoggerFactory.getLogger(${className}Controller::class.java)
        }
}