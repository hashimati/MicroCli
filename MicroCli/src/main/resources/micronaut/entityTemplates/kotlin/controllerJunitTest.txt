package ${defaultPackage}.controllers;

import ${defaultPackage}.domains.${className};
import ${defaultPackage}.utils.Randomizer;
import io.micronaut.http.HttpRequest;
import io.micronaut.http.client.HttpClient;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.test.extensions.junit5.annotation.MicronautTest
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Test;
${moreImports}

@MicronautTest
class ${className}ControllerTest(@Client("/api/${entityName}") private val client: HttpClient ) {

    lateinit var ${entityName}:${className};



    @Test
    fun save() {
        var ${entityName}:${className} =  Randomizer<${className}>(${className}::class.java).randomInstance;
        var request :HttpRequest<${className}> = HttpRequest.POST("/save", ${entityName});
        this.${entityName} = client.toBlocking().retrieve(request, ${className}::class.java)
        assertNotNull(${entityName});
    }

    @Test
    fun findById() {
        save();
        var request :HttpRequest<${className}>  = HttpRequest.GET("/get?id="+this.${entityName}.id);
        var ${entityName}:${className} = client.toBlocking().retrieve(request, ${className}::class.java);
        assertNotNull(${entityName});
        assertEquals(${entityName}.id , this.${entityName}.id);
    }

    @Test
    fun deleteById() {
        save();
        var request:HttpRequest<Boolean>  = HttpRequest.DELETE("/delete/"+this.${entityName}.id);
        var body: Boolean? = client.toBlocking().retrieve(request, Boolean::class.java);
        assertTrue(body == true);
    }

    @Test
    fun findAll(){

        save();
        var request:HttpRequest<Iterable<${className}>>  = HttpRequest.GET("/findAll");
        var list : Iterable<*>? = client.toBlocking().retrieve(request, Iterable::class.java)
        assertNotNull(list)

    }

    @Test
    fun update() {
        save();
        var request:HttpRequest<${className}> = HttpRequest.PUT("/update", this.${entityName});
        var ${entityName}: ${className}  = client.toBlocking().retrieve(request, ${className}::class.java);
        assertNotNull(${entityName});
    }
}