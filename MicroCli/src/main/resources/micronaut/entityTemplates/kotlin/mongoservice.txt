package ${servicePackage}

<% if(cached) out.print 'import io.micronaut.cache.annotation.*' %>
import jakarta.inject.Inject
import jakarta.inject.Singleton
import ${entityPackage}
import ${repoPackage}
<% print reactor? "import reactor.core.publisher.Flux" : "import io.reactivex.Flowable" %>
<% print reactor? "import reactor.core.publisher.Mono" : "import io.reactivex.Single" %>
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed;' %>
${moreImports}

<% if(cached) out.print '@CacheConfig("'+ tableName +'")' %>
@Singleton
class ${className}Service(private val ${entityName}Repository: ${className}Repository){

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.save", description = "Observing all service metric for saving '+entityName+' object")' %>
	fun save(${entityName}:${className} ) :<% print reactor? "Mono" : "Single" %><${className}> {
	    log.info("Saving ${entityName} :{}",${entityName} )
	    return ${entityName}Repository.save(${entityName})
	}


    <% if(cached) out.print '@Cacheable' %>
    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.findById", description = "Observing all service metric for finding a '+entityName+' object by id")' %>
    fun findById( id:String) :<% print reactor? "Mono" : "Single" %><${className}> {
        log.info("Finding ${className} by Id: {}", id)
        return ${entityName}Repository.findById(id)
    }


    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.findAll", description = "Observing all service metric for finding all '+entityName+' objects")' %>
    fun findAll(): <% print reactor? "Flux" : "Flowable" %><${className}> {
        log.info("Finding all ${className}")
        return ${entityName}Repository.findAll()
    }

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.deleteById", description = "Observing all service metric for deleting a '+entityName+' object by id")' %>
    fun deleteById( id:String) : <% print reactor? "Mono" : "Single" %><Boolean> {
        log.info("Deleting ${className} by id:{}", id)
        return ${entityName}Repository.deleteById(id)
    }

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.update", description = "Observing all service metric for update a '+entityName+' object")' %>
    fun  update(${entityClass} object):<% print reactor? "Mono" : "Single" %><${entityClass}>  {
        log.info("Deleting ${className} by id:{}", object)
        return ${entityName}Repository.update(object)
    }

${methods}

  companion object {
        val log :Logger = LoggerFactory.getLogger(${className}Service::class.java)
    }
}