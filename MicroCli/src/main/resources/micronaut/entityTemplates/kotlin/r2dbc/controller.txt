package ${controllerPackage}

import io.micronaut.http.annotation.*
import ${entityPackage}
import ${servicePackage}
import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.responses.ApiResponse
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed;' %>
<% if(jaeger) out.print 'import io.micronaut.tracing.annotation.NewSpan;' %>
<% if(jaeger) out.print 'import io.micronaut.tracing.annotation.SpanTag;' %>
@Controller("/api/${entities}")
class ${className}Controller(private val ${entityName}Service: ${className}Service) {




    @Post("/save")
    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.save", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for saving '+entityName+' object")' %>
    @Operation(summary = "Creating a ${entityName} and Storing in the database",
            description = "A REST service, which saves ${className} objects to the database."
    )
    @ApiResponse(
            content = [Content(mediaType = "application/json")]
    )
    fun save(@Body ${entityName}: ${className}):  Mono<${className}> {

        log.info("Saving ${className} :{}", ${entityName})
        return ${entityName}Service.save(${entityName})
    }


    @Get("/get")
    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.findById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding a '+entityName+' object by id")' %>
    @Operation(summary = "Getting a ${entityName} by Id",
        description = "A REST service, which retrieves a ${className} object by Id."
    )
    @ApiResponse(
        content = [Content(mediaType = "application/json")]
    )

    fun findById(id:Long): Mono<${className}> {
        log.info("Finding ${className}: {}", id )
        return ${entityName}Service.findById(id)
    }

    @Delete("/delete/{id}")
    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.deleteById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for deleting a '+entityName+' object by id")' %>
    @Operation(summary = "Deleting a ${entityName} by ID",
            description = "A REST service, which deletes ${className} object from the database."
    )
    @ApiResponse(
            content = [Content(mediaType = "boolean")]
    )

    fun deleteById(id:Long): Mono<Boolean> {
        log.info("Deleting ${className}: {}", id)
        return  ${entityName}Service.deleteById(id)
    }

    @Get("/findAll")
    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.findAll", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding all '+entityName+' objects")' %>
    @Operation(summary = "Retrieving all ${entityName} objects as Json",
            description = "A REST service, which returns all ${className} objects from the database."
    )
    @ApiResponse(
            content = [Content(mediaType = "application/json")]
    )
    fun findAll():Flux<${className}>{
        log.info("find All")
        return ${entityName}Service.findAll()
    }

    @Put("/update")
    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.update", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for update a '+entityName+' object")' %>
    @Operation(summary = "Updating a ${entityName}.",
            description = "A REST service, which update a ${className} objects to the database."
    )
    @ApiResponse(
            content = [Content(mediaType = "application/json")]
    )
    fun update(@Body ${entityName}: ${className}):Mono<${className}>
    {
        log.info("update {}", ${entityName})
        return ${entityName}Service.update(${entityName})

    }
    companion object {
            val log :Logger = LoggerFactory.getLogger(${className}Controller::class.java)
    }
 }