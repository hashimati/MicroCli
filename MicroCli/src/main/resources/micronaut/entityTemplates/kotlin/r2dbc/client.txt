package ${clientPackage}



import io.micronaut.context.annotation.Parameter
import io.micronaut.http.annotation.*
import io.micronaut.http.client.annotation.Client;
import jakarta.inject.Inject
import ${entityPackage}
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
${moreImports}

@Client("/api/${entities}")
interface ${classNameA}Client {

    @Post("/save")
    fun save(${entityName}:${classNameA}<% if(header) out.print ', @Header("Authorization") authorization:String '%>): Mono<${className}>

    @Get("/get")
    fun findById(@Parameter("id") id:Long<% if(header) out.print ', @Header("Authorization") authorization:String '%>): Mono<${className}>

    @Delete("/delete/{id}")
    fun deleteById(@PathVariable("id") id: Long<% if(header) out.print ', @Header("Authorization") authorization:String '%>): Mono<Boolean>

    @Get("/findAll")
    fun findAll(<% if(header) out.print '@Header("Authorization") authorization:String '%>):Flux<${className}>

    @Put("/update")
    fun update(@Body ${entityName}: ${className}<% if(header) out.print ', @Header("Authorization") authorization:String '%>):Mono<${className}>
${methods}
}

