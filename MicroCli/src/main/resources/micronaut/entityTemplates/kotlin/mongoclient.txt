package ${clientPackage}



import io.micronaut.context.annotation.Parameter
import io.micronaut.http.annotation.*
import io.micronaut.http.client.annotation.Client;
import jakarta.inject.Inject
<% print reactor? "import reactor.core.publisher.Flux;" : "import io.reactivex.Flowable;" %>
<% print reactor? "import reactor.core.publisher.Mono;" : "import io.reactivex.Single;" %>
import ${entityPackage}
${moreImports}


@Client("/api/${entities}")
interface ${classNameA}Client {

    @Post("/save")
    fun save(${entityName}:${classNameA}): <% print reactor? "Mono" : "Single" %><${className}>

    @Get("/get")
    fun findById(@Parameter("id") id:String): <% print reactor? "Mono" : "Single" %><${className}>

    @Delete("/delete/{id}")
    fun deleteById(@PathVariable("id") id: Long): Boolean

    @Get("/findAll")
    fun findAll():<% print reactor? "Flux" : "Flowable" %><${className}>

    @Put("/update")
    fun update(@Body ${entityName}: ${className}):<% print reactor? "Mono" : "Single" %><${className}>
${methods}
}

