package ${grpcPackage};

import io.grpc.stub.StreamObserver;
import ${defaultPackage}.*;
import ${defaultPackage}.domains.${entity};
import ${defaultPackage}.services.${entity}Service;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;

@Singleton
class ${entity}Endpoint extends
        ${entity}GrpcServiceGrpc.${entity}GrpcServiceImplBase {

    @Inject
    private ${entity}Service ${entityName}Service;

    @Override
    void save(${entity}Grpc request, StreamObserver<MessageReply> responseObserver) {
        super.save(request, responseObserver);
        ${entity} ${entityName} = new ${entity}(){{
            ${setAttributes}
        }};
        ${entity} result = ${entityName}Service.save(${entityName});
        if(result != null)
            responseObserver.onNext(MessageReply.newBuilder().setMessage("Done").build());
        else
            responseObserver.onNext(MessageReply.newBuilder().setMessage("Failed").build());
        responseObserver.onCompleted();;

    }

    @Override
    void update(${entity}Grpc request, StreamObserver<MessageReply> responseObserver) {
        super.update(request, responseObserver);
        ${entity} ${entityName} = new ${entity}(){{
            ${setAttributes}
        }};
        ${entity} result = ${entityName}Service.update(${entityName});
        if(result != null)
            responseObserver.onNext(MessageReply.newBuilder().setMessage("Done").build());
        else
            responseObserver.onNext(MessageReply.newBuilder().setMessage("Failed").build());
        responseObserver.onCompleted();
    }

    @Override
    void delete(IdQuery request, StreamObserver<MessageReply> responseObserver) {
        super.delete(request, responseObserver);
        responseObserver.onNext(
                ${entityName}Service.deleteById(request.getId())?
                        MessageReply.newBuilder().setMessage("Done").build():
                        MessageReply.newBuilder().setMessage("Failed").build());

        responseObserver.onCompleted();
    }

    @Override
    void findById(IdQuery request, StreamObserver<${entity}Grpc> responseObserver) {
        super.findById(request, responseObserver);

        ${entity} ${entityName} = ${entityName}Service.findById(request.getId());
        responseObserver.onNext(${entity}Grpc
                .newBuilder()
                ${setAttributesBuilder}
                .setId(${entityName}.getId())
                .build());
    }
    @Override
    void findAll(PageQuery request, StreamObserver<${entity}Grpc> responseObserver) {
        super.findAll(request, responseObserver);
        ${entityName}Service.findAll().forEach(
                ${entityName}-> responseObserver.onNext(${entity}Grpc.newBuilder()
                        ${setAttributesBuilder}
                        .setId(${entityName}.getId())
                        .build())
        );
        responseObserver.onCompleted();
    }
}
