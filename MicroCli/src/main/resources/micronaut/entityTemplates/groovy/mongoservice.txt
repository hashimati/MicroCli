package ${servicePackage}

<% if(cached) out.print 'import io.micronaut.cache.annotation.*' %>
import jakarta.inject.Inject
import jakarta.inject.Singleton
import ${entityPackage}
import ${repoPackage}
<% print reactor? "import reactor.core.publisher.Flux;" : "import io.reactivex.Flowable;" %>
<% print reactor? "import reactor.core.publisher.Mono;" : "import io.reactivex.Single;" %>

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

<% if(cached) out.print '@CacheConfig("'+ tableName +'")' %>
@Singleton
class ${className}Service {


   static final Logger log = LoggerFactory.getLogger(${className}Service.class);

    @Inject ${className}Repository ${entityName}Repository

	 <% print reactor? "Mono" : "Single" %><${className}> save(${className} ${entityName}) {

        log.info("Saving  ${className} : {}", ${entityName});

        //TODO insert your logic here!
        //saving Object

        return ${entityName}Repository.save(${entityName})
    }

    <% if(cached) out.print '@Cacheable' %>
    <% print reactor? "Mono" : "Single" %><${className}> findById(String id){
        log.info("Finding ${className} By Id: {}", id);
        return ${entityName}Repository.findById(id)
    }

     <% print reactor? "Flux" : "Flowable" %><${className}> findAll(){

            log.info("Finding all ${className}");
            return ${entityName}Repository.findAll()
    }

     <% print reactor? "Mono" : "Single" %><Boolean> deleteById(String id) {

        log.info("Deleting ${className} By Id: {}", id);
        return ${entityName}Repository.deleteById(id)
	}
	<% print reactor? "Mono" : "Single" %><${className}> update(${className} ${entityName})   {
    	    log.info("Updating ${className}: {}", ${entityName})
    	    return ${entityName}Repository.update(${entityName})
    }
}