package ${controllerPackage}

import io.micronaut.context.annotation.Parameter
import io.micronaut.http.annotation.*
import jakarta.inject.Singleton
import ${entityPackage}
import ${servicePackage}
import jakarta.inject.Inject
import jakarta.inject.Inject
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.responses.ApiResponse
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed;' %>
<% if(jaeger) out.print 'import io.micronaut.tracing.annotation.NewSpan;' %>
<% if(jaeger) out.print 'import io.micronaut.tracing.annotation.SpanTag;' %>
<% print reactor? "import reactor.core.publisher.Flux" : "import io.reactivex.Flowable" %>
<% print reactor? "import reactor.core.publisher.Mono" : "import io.reactivex.Single" %>

@Controller("/api/${entities}")
class ${className}Controller {

    @Inject ${className}Service ${entityName}Service;
    static final Logger log = LoggerFactory.getLogger(${className}Controller.class);

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.save", percentiles = { 0.5d, 0.95d, 0.99d }, description = "Observing all service metric for saving '+entityName+' object")' %>
    @Post("/save")
    @Operation(summary = "Creating a ${entityName} and Storing in the database",
            description = "A REST service, which saves ${className} objects to the database.",
            operationId = "Save${className}"
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Object Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not stored")
    <% print reactor? "Mono" : "Single" %><${className}> save(<% if(jaeger) out.print '@SpanTag("save.'+entityName+'")'%> @Body ${className} ${entityName}){
        log.info("Saving  ${className} : {}", ${entityName});
        //TODO insert your logic here!
        //saving Object
        return ${entityName}Service.save(${entityName})
    }


    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.findById", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for finding a '+entityName+' object by id")' %>    @Get("/get")
    @Operation(summary = "Getting a ${entityName} by Id",
        description = "A REST service, which retrieves a ${className} object by Id.",
        operationId = "FindById${className}"
    )
    @ApiResponse(
        content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Id Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not found")
    <% print reactor? "Mono" : "Single" %><${className}> findById(<% if(jaeger) out.print '@SpanTag("findById.id")'%> @Parameter("id") long id){

        log.info("Finding ${className} By Id: {}", id);
        return ${entityName}Service.findById(id)
    }

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.deleteById", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for deleting a '+entityName+' object by id")' %>
    @Delete("/delete/{id}")
    @Operation(summary = "Deleting a ${entityName} by ID",
            description = "A REST service, which deletes ${className} object from the database.",
            operationId = "DeleteById${className}"
    )
    @ApiResponse(
            content = @Content(mediaType = "boolean")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Id Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not found")
    <% print reactor? "Mono" : "Single" %><Boolean> deleteById(<% if(jaeger) out.print '@SpanTag("deleteById.id")'%> @PathVariable("id") long id){
        log.info("Deleting ${className} by Id: {}", id);
        return  ${entityName}Service.deleteById(id);
    }


    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.findAll", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for finding all '+entityName+' objects")' %>
    @Get("/findAll")
    @Operation(summary = "Retrieving all ${entityName} objects as Json",
            description = "A REST service, which returns all ${className} objects from the database.",
            operationId = "FindAll${className}"
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    <% print reactor? "Flux" : "Flowable" %><${className}> findAll(){
        log.info("find All")
        return ${entityName}Service.findAll()
    }

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.update", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for update a '+entityName+' object")' %>
    @Put("/update")
    @Operation(summary = "Updating a ${entityName}.",
            description = "A REST service, which update a ${className} objects to the database.",
            operationId = "update${className}"
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "404", description = "${className} not found")
    <% print reactor? "Mono" : "Single" %><${className}> update(<% if(jaeger) out.print '@SpanTag("update.'+entityName+'")'%> @Body ${className} ${entityName})
    {
        log.info("update {}", ${entityName})
        return ${entityName}Service.update(${entityName})
    }
}

