package ${servicePackage}

<% if(cached) out.print 'import io.micronaut.cache.annotation.*' %>
import jakarta.inject.Inject
import jakarta.inject.Singleton
import javax.transaction.Transactional
import ${entityPackage}
import ${repoPackage}
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed;' %>
<% print reactor? "import reactor.core.publisher.Flux" : "import io.reactivex.Flowable" %>
<% print reactor? "import reactor.core.publisher.Mono" : "import io.reactivex.Single" %>
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

<% if(cached) out.print '@CacheConfig("'+ tableName +'")' %>
@Singleton
@Transactional
class ${className}Service {
     Logger log = LoggerFactory.getLogger(${className}Service.class)
    @Inject ${className}Repository ${entityName}Repository

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.save", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for saving '+entityName+' object")' %>
    <% print reactor? "Mono" : "Single" %><${className}> save(${className} ${entityName}){
        log.info("Saving  ${className} : {}", ${entityName})
         //TODO insert your logic here!
         //saving Object

         return ${entityName}Repository.save(${entityName})
     }

    <% if(cached) out.print '@Cacheable' %>
    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.findById", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for finding a '+entityName+' object by id")' %>
    <% print reactor? "Mono" : "Single" %><${className}> findById(long id){
        log.info("Finding ${className} By Id: {}", id)
        return ${entityName}Repository.findById(id).orElse(null)
    }

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.deleteById", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for deleting a '+entityName+' object by id")' %>
    <% print reactor? "Mono" : "Single" %><Boolean> deleteById(long id){
        try
        {
            ${entityName}Repository.deleteById(id);
            log.info("Deleting ${className} by Id: {}", id);
            return true;
        }
        catch(Exception ex)
        {
            log.info("Failed to delete ${className} by Id: {}", id);
            ex.printStackTrace();
            return false;
        }
    }

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.findAll", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for finding all '+entityName+' objects")' %>
    <% print reactor? "Flux" : "Flowable" %><${className}> findAll() {
        log.info("Find All")
      return  ${entityName}Repository.findAll();
    }

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.update", percentiles =[ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for update a '+entityName+' object")' %>
    <% print reactor? "Mono" : "Single" %><${className}> update(${className} ${entityName})
    {
        log.info("update {}", ${entityName})
        return ${entityName}Repository.update(${entityName})

    }
}