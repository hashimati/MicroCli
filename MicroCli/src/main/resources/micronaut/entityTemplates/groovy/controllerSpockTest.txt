package ${defaultPackage}.controllers

import ${defaultPackage}.domains.${className}
import ${defaultPackage}.utils.Randomizer
import io.micronaut.http.HttpRequest
import io.micronaut.http.MutableHttpRequest
import io.micronaut.http.client.HttpClient
import io.micronaut.http.client.annotation.Client
import io.micronaut.runtime.EmbeddedApplication
import io.micronaut.test.extensions.spock.annotation.MicronautTest
import spock.lang.Specification
<%if(header) out.print 'import '+defaultPackage+'.security.SecurityClient'%>
<%if(header) out.print 'import io.micronaut.security.authentication.UsernamePasswordCredentials'%>
<%if(header) out.print 'import io.micronaut.security.token.jwt.render.BearerAccessRefreshToken'%>
${moreImports}
import jakarta.inject.Inject


@MicronautTest
class ${className}ControllerTest extends Specification{


    @Inject
    EmbeddedApplication application


    @Inject
    @Client("/api/${entityName}")
    HttpClient client;

    <% if(header) out.print ''@Inject SecurityClient securityClient'%>

    ${className} body;

    def saving()
    {
        ${className} ${entityName} = new Randomizer<${className}>( ${className}.class).getRandomInstance();;
        <% if(header) out.print 'BearerAccessRefreshToken token = securityClient.login(new UsernamePasswordCredentials("admin", "admin"));'%>
        HttpRequest<${className}> request = HttpRequest.POST("/save", ${entityName})<%if(header) out.print'.bearerAuth(token.getAccessToken())'%><%if(basic) out.print '.basicAuth("admin", "admin")'%>;
        this.body = client.toBlocking().retrieve(request, ${className}.class);
    }


    def 'testing saving ${entityName}'() {
        saving()
        expect:
        this.body != null;
    }


    def 'test finding ${entityName} by Id'() {
        saving()
        <% if(header) out.print 'BearerAccessRefreshToken token = securityClient.login(new UsernamePasswordCredentials("admin", "admin"));'%>
        MutableHttpRequest<Object> request = HttpRequest.GET("/get?id="+this.body.getId())<%if(header) out.print'.bearerAuth(token.getAccessToken())'%><%if(basic) out.print '.basicAuth("admin", "admin")'%>;
        ${className} body = client.toBlocking().retrieve(request, ${className}.class);

        expect:
        body.getId() == this.body.getId();
    }
//
//
    def 'test deleting ${entityName} by id'() {
        saving();
        <% if(header) out.print 'BearerAccessRefreshToken token = securityClient.login(new UsernamePasswordCredentials("admin", "admin"));'%>
        MutableHttpRequest<Object> request = HttpRequest.DELETE("/delete/"+this.body.id)<%if(header) out.print'.bearerAuth(token.getAccessToken())'%><%if(basic) out.print '.basicAuth("admin", "admin")'%>;

        Boolean body= client.toBlocking().retrieve(request, Boolean.class);

        println body
        expect:
        body.booleanValue()== true;

    }


    void 'test finding all'() {

        saving();
        <% if(header) out.print 'BearerAccessRefreshToken token = securityClient.login(new UsernamePasswordCredentials("admin", "admin"));'%>
        MutableHttpRequest<Object> request = HttpRequest.GET("/findAll")<%if(header) out.print'.bearerAuth(token.getAccessToken())'%><%if(basic) out.print '.basicAuth("admin", "admin")'%>;
        Iterable<${className}> list = client.toBlocking().retrieve(request, Iterable.class);
        System.out.println(list);
        expect:
        list != null;

    }


    void 'test updating ${entityName}'() {
        saving();
        <% if(header) out.print 'BearerAccessRefreshToken token = securityClient.login(new UsernamePasswordCredentials("admin", "admin"));'%>
        HttpRequest<${className}> request = HttpRequest.PUT("/update", this.body)<%if(header) out.print'.bearerAuth(token.getAccessToken())'%><%if(basic) out.print '.basicAuth("admin", "admin")'%>;
        ${className} ${entityName} = client.toBlocking().retrieve(request, ${className}.class);
        expect:
        ${entityName} != null;

    }
}

