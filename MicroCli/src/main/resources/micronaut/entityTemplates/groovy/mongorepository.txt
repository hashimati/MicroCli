package ${entityRepositoryPackage}

import com.mongodb.reactivestreams.client.MongoClient
import com.mongodb.reactivestreams.client.MongoClients
import com.mongodb.reactivestreams.client.MongoCollection

import ${entityPackage}.${entityClass}
import io.reactivex.Flowable;
import io.reactivex.Single;
import org.bson.BsonDocument;
import org.bson.BsonString;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import jakarta.inject.Singleton;
import jakarta.inject.Inject

@Singleton
class ${entityClass}Repository {

    static final Logger log = LoggerFactory.getLogger(${entityClass}Repository.class);

    @Inject
    MongoClient mongoClient

    MongoCollection<${entityClass}> getCollection()
    {

        log.info("Getting collection");
        return mongoClient.getDatabase("${databaseName}")
                .getCollection("${collectionName}", ${entityClass}.class)
    }

    Single<${entityClass}> findAsSingle(BsonDocument query)
    {
        log.info("Finding query {}", query);

        return Single
                .fromPublisher(getCollection()
                        .find(query))
    }

    Flowable<${entityClass}> findAsFlowable(BsonDocument query)
    {
        log.info("Finding query {}", query);
        return Flowable
                .fromPublisher(getCollection()
                        .find(query))
    }


    Single<${entityClass}> save(${entityClass} object)
    {

        log.info("saving ${entityClass}", object);
        if(object.getId() == null)
        {
            return Single.just(object)
                .onErrorReturn({fail-> object})
        }
        return Single.fromPublisher(getCollection().insertOne(object))
        .map({success -> object})
    }

    Flowable<${entityClass}> findAll()
    {

        log.info("finding all ${entityClass}");
        return Flowable.fromPublisher(getCollection().find())
    }

    Single<${entityClass}> findById(final String id){
        log.info("finding ${entityClass} by Id {}", id);
        final BsonDocument document = new BsonDocument();
        document.append("_id", new BsonString(id));
        return findAsSingle(document)
    }


    Single<Boolean> deleteById(String id) {
        log.info("Deleting ${entityClass} by Id {}", id);
        BsonDocument document = new BsonDocument();
        document.append("_id", new BsonString(id));
        return Single.fromPublisher(getCollection().deleteOne(document))
        .map({success->Boolean.TRUE})
        .onErrorReturn({faile->Boolean.FALSE})

	}

}