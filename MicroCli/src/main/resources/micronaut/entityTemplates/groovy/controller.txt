package ${controllerPackage}

import io.micronaut.context.annotation.Parameter
import io.micronaut.http.annotation.*
import io.micronaut.http.MediaType
import io.micronaut.http.multipart.CompletedFileUpload
import io.micronaut.core.version.annotation.Version
import io.micronaut.retry.annotation.CircuitBreaker
import jakarta.inject.Singleton
import ${entityPackage}
import ${servicePackage}
<% if(principle) out.print 'import java.security.Principal' %>
<% if(principle) out.print 'import io.micronaut.security.annotation.Secured'%>
<% if(principle) out.print 'import io.micronaut.security.rules.SecurityRule' %>
<% if(header) out.print 'import static io.micronaut.http.HttpHeaders.AUTHORIZATION'%>
import jakarta.inject.Inject
<% if(jaxrs) out.print 'import javax.ws.rs.*'%>
import io.micronaut.core.annotation.NonNull;
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.responses.ApiResponse
import io.swagger.v3.oas.annotations.tags.Tag
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed' %>
<% if(jaeger) out.print 'import io.micronaut.tracing.annotation.NewSpan' %>
<% if(jaeger) out.print 'import io.micronaut.tracing.annotation.SpanTag' %>
<% if(pageable) out.print 'import io.micronaut.data.model.Page' %>
<% if(pageable) out.print 'import io.micronaut.data.model.Pageable' %>
${moreImports}

@Tag(name = "${className}")
<% if(!jaxrs) out.print '@Controller'%><% if(jaxrs) out.print '@Path'%>("/api/v1/${entities}")
@CircuitBreaker(attempts = "5", maxDelay = "3s", reset = "30")
class ${className}Controller {

    @Inject ${className}Service ${entityName}Service
    static final Logger log = LoggerFactory.getLogger(${className}Controller.class)

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.save", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for saving '+entityName+' object")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Post'%><% if(jaxrs) out.print '@POST @Path'%>("/save")
    @Version("1")
    @Operation(summary = "Creating a ${entityName} and Storing in the database",
            description = "A REST service, which saves ${className} objects to the database.",
            operationId = "Save${className}"
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Object Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not stored")
    ${className} save(<% if(jaeger) out.print '@SpanTag("save.'+entityName+'")'%> @Body @NonNull ${className} ${entityName}<% if(principle) out.print ', Principal principle'%> <% if(header) out.print ',  @Header("Authorization") String authorization'%>){
        log.info("Saving  ${className} : {}", ${entityName})
        //TODO insert your logic here!
        //saving Object
        return ${entityName}Service.save(${entityName}<% if(principle) out.print ', principle'%> <% if(header) out.print ', authorization'%>)
    }


    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.findById", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for finding a '+entityName+' object by id")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Get'%><% if(jaxrs) out.print '@GET @Path'%>("/get")
    @Version("1")
    @Operation(summary = "Getting a ${entityName} by Id",
        description = "A REST service, which retrieves a ${className} object by Id.",
        operationId = "FindById${className}"
    )
    @ApiResponse(
        content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Id Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not found")
    ${className} findById(<% if(jaeger) out.print '@SpanTag("findById.id")'%> @Parameter("id") ${idType} id<% if(principle) out.print ', Principal principle'%> <% if(header) out.print ',  @Header("Authorization") String authorization'%>){

        log.info("Finding ${className} By Id: {}", id)
        return ${entityName}Service.findById(id<% if(principle) out.print ', principle'%> <% if(header) out.print ', authorization'%>)
    }

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.deleteById", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for deleting a '+entityName+' object by id")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Delete'%><% if(jaxrs) out.print '@DELETE @Path'%>("/delete/{id}")
    @Version("1")
    @Operation(summary = "Deleting a ${entityName} by ID",
            description = "A REST service, which deletes ${className} object from the database.",
            operationId = "DeleteById${className}"
    )
    @ApiResponse(
            content = @Content(mediaType = "boolean")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Id Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not found")
    Boolean deleteById(<% if(jaeger) out.print '@SpanTag("deleteById.id")'%> @PathVariable("id") ${idType} id<% if(principle) out.print ', Principal principle'%> <% if(header) out.print ',  @Header("Authorization") String authorization'%>){
        log.info("Deleting ${className} by Id: {}", id)
        return  ${entityName}Service.deleteById(id<% if(principle) out.print ', principle'%> <% if(header) out.print ', authorization'%>)
    }


    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.findAll", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for finding all '+entityName+' objects")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Get'%><% if(jaxrs) out.print '@GET @Path'%>("/findAll")
    @Version("1")
    @Operation(summary = "Retrieving all ${entityName} objects as Json",
            description = "A REST service, which returns all ${className} objects from the database.",
            operationId = "FindAll${className}"
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    <% if(pageable) out.print 'Page' %><% if(!pageable) out.print 'Iterable' %><${className}> findAll(<% if(pageable) out.print 'Pageable pageable' %><% if(pageable && principle) out.print ', ' %><% if(principle) out.print 'Principal principle'%><% if(header) out.print ',  @Header("Authorization") String authorization'%>){
        log.info("find All")
        return ${entityName}Service.findAll(<% if(pageable) out.print 'pageable' %><% if(pageable && principle) out.print ', ' %><% if(principle) out.print 'principle'%> <% if(header) out.print ', authorization'%>)
    }

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.update", percentiles = [ 0.5d, 0.95d, 0.99d ], description = "Observing all service metric for update a '+entityName+' object")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Put'%><% if(jaxrs) out.print '@PUT @Path'%>("/update")
    @Version("1")
    @Operation(summary = "Updating a ${entityName}.",
            description = "A REST service, which update a ${className} objects to the database.",
            operationId = "update${className}"
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "404", description = "${className} not found")
    ${className} update(<% if(jaeger) out.print '@SpanTag("update.'+entityName+'")'%> @NonNull @Body ${className} ${entityName}<% if(principle) out.print ', Principal principle'%> <% if(header) out.print ',  @Header("Authorization") String authorization'%>)
    {
        log.info("update {}", ${entityName})
        return ${entityName}Service.update(${entityName}<% if(principle) out.print ', principle'%> <% if(header) out.print ', authorization'%>)
    }
${methods}
}

