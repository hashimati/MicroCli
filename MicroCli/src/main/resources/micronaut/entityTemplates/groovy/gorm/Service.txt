package ${servicePackage}

<% if(cached) out.print 'import io.micronaut.cache.annotation.*' %>
import ${entityPackage}
import ${repoPackage}
import jakarta.inject.Inject
import jakarta.inject.Singleton
import java.util.List
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils
import grails.gorm.transactions.Transactional
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed;' %>

<% if(cached) out.print '@CacheConfig("'+ tableName +'")' %>
@Singleton
class ${className}Service {

    Logger log = LoggerFactory.getLogger(${className}Service.class)

    @Inject
    ${className}Repository ${entityName}Repository
    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.save", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for saving '+entityName+' object")' %>
    ${className} save(${className} ${entityName}){

        log.info("Saving  ${className} : {}", ${entityName})
        return ${entityName}Repository.save(${entityName})
    }

    <% if(cached) out.print '@Cacheable' %>
    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.findById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding a '+entityName+' object by id")' %>
    ${className} findById(Serializable id){
        log.info("Finding ${className} By Id: {}", id)
        return ${entityName}Repository.findById(id)
    }

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.findAll", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding all '+entityName+' objects")' %>
    List<${className}> findAll(){
        log.info("Find All")
        return ${entityName}Repository.list()
    }
    Long count(){
        log.info("counting ${className} objects.")
        return ${entityName}Repository.count()

    }

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.deleteById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for deleting a '+entityName+' object by id")' %>
    boolean deleteById(Serializable id){
        try
        {
            ${entityName}Repository.delete(id);
            log.info("Deleting ${className} by Id: {}", id);
            return true;
        }
        catch(Exception ex)
        {
            log.info("Failed to delete ${className} by Id: {}", id);
            ex.printStackTrace();
            return false;
        }
    }

    @Transactional
    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.update", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for update a '+entityName+' object")' %>
    ${className} update(${className} ${entityName})
    {
        log.info("update {}", ${entityName})
        ${className} obj = ${className}.findById(${entityName}.id);
        ${updates}
        return obj.save(flush:true);
    }
}