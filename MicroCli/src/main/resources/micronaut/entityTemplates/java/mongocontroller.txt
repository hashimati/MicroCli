package ${controllerPackage};


import jakarta.inject.Inject;
import io.micronaut.context.annotation.Parameter;
import io.micronaut.scheduling.TaskExecutors;
import io.micronaut.scheduling.annotation.ExecuteOn;
<% if(principle) out.print 'import java.security.Principal;' %>
<% if(principle) out.print 'import io.micronaut.security.annotation.Secured;'%>
<% if(principle) out.print 'import io.micronaut.security.rules.SecurityRule;' %>
<% if(header) out.print 'import static io.micronaut.http.HttpHeaders.AUTHORIZATION;'%>
import io.micronaut.http.annotation.*;
<% print reactor? "import reactor.core.publisher.Flux;" : "import io.reactivex.Flowable;" %>
<% print reactor? "import reactor.core.publisher.Mono;" : "import io.reactivex.Single;" %>
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import ${entityPackage};
import ${servicePackage};
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed;' %>
<% if(jaeger) out.print 'import io.micronaut.tracing.annotation.NewSpan;' %>
<% if(jaeger) out.print 'import io.micronaut.tracing.annotation.SpanTag;' %>
${moreImports}
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
<% if(jaxrs) out.print 'import javax.ws.rs.*;'%>

@ExecuteOn(TaskExecutors.IO)
<% if(!jaxrs) out.print '@Controller'%><% if(jaxrs) out.print '@@Path'%>("/api/v1/${entityName}")
public class ${className}Controller {

    private static final Logger log = LoggerFactory.getLogger(${className}Controller.class);

    @Inject
    private ${className}Service ${entityName}Service ;



    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.save", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for saving '+entityName+' object")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Post'%><% if(jaxrs) out.print '@POST @Path'%>("/save")
    @Operation(summary = "Creating a ${entityName} and Storing in the database",
            description = "A REST service, which saves ${className} objects to the database."
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Object Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not stored")
    public <% print reactor? "Mono" : "Single" %><${className}> save(<% if(jaeger) out.print '@SpanTag("save.'+entityName+'")'%> @Body ${className} ${entityName}<% if(principle) out.print ', Principal principle'%> <% if(header) out.print ',  @Header("Authorization") String authorization'%>)
    {
        log.info("Saving  ${className} : {}", ${entityName});
        //TODO: enter your logic here before saving.
        return ${entityName}Service.save(${entityName});
    }

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.findById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding a '+entityName+' object by id")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Get'%><% if(jaxrs) out.print '@GET @Path'%>("/get")
    @Operation(summary = "Getting a ${entityName} by Id",
        description = "A REST service, which retrieves a ${className} object by Id."
    )
    @ApiResponse(
        content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Id Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not found")
    public <% print reactor? "Mono" : "Single" %><${className}> findById(<% if(jaeger) out.print '@SpanTag("findById.id")'%> @Parameter("id") String id<% if(principle) out.print ', Principal principle'%> <% if(header) out.print ',  @Header("Authorization") String authorization'%>)
    {
            log.info("Finding ${className} By Id: {}", id);
            return ${entityName}Service.findById(id);
    }

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.findAll", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding all '+entityName+' objects")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Get'%><% if(jaxrs) out.print '@GET @Path'%>("/findAll")
    @Operation(summary = "Retrieving all ${entityName} objects as Json",
            description = "A REST service, which returns all ${className} objects from the database."
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    public <% print reactor? "Flux" : "Flowable" %><${className}> findAll(<% if(principle) out.print 'Principal principle'%> <% if(header) out.print ',  @Header("Authorization") String authorization'%>)
    {
            log.info("Finding All ${className}");
            return ${entityName}Service.findAll();
    }

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.deleteById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for deleting a '+entityName+' object by id")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Delete'%><% if(jaxrs) out.print '@DELETE @Path'%>("/delete/{id}")
    @Operation(summary = "Deleting a ${entityName} by ID",
            description = "A REST service, which deletes ${className} object from the database."
    )
    @ApiResponse(
            content = @Content(mediaType = "boolean")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Id Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not found")
    public <% print reactor? "Mono" : "Single" %><Boolean> deleteById(<% if(jaeger) out.print '@SpanTag("deleteById.id")'%> @PathVariable("id") String id<% if(principle) out.print ', Principal principle'%> <% if(header) out.print ',  @Header("Authorization") String authorization'%>){
        log.info("Deleting ${className} by Id: {}", id);
        return  ${entityName}Service.deleteById(id);
    }

    <% if(jaeger) out.print '@NewSpan("'+className+'-service")'%>
    <% if(micrometer) out.print '@Timed(value = "'+controllerPackage+'.'+entityName+'Controller.update", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for update a '+entityName+' object")' %>
    <% if(principle) out.print '@Secured(SecurityRule.IS_AUTHENTICATED)'%>
    <% if(!jaxrs) out.print '@Put'%><% if(jaxrs) out.print '@PUT @Path'%>("/update")
    @Operation(summary = "Updating a ${entityName}.",
            description = "A REST service, which update a ${className} objects to the database."
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "404", description = "${className} not found")
   q2 public <% print reactor? "Mono" : "Single" %><${className}> update(<% if(jaeger) out.print '@SpanTag("update.'+entityName+'")'%> @Body ${className} ${entityName}<% if(principle) out.print ', Principal principle'%> <% if(header) out.print ',  @Header("Authorization") String authorization'%>) {
        log.info("update {}", ${entityName});
        return ${entityName}Service.update(${entityName});
    }

${methods}
}