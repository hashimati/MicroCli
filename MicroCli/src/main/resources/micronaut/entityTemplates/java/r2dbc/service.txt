package ${servicePackage};


import javax.inject.Inject;
import javax.inject.Singleton;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import javax.transaction.Transactional;
import ${entityPackage};
import ${repoPackage};


@Singleton
@Transactional
public class ${className}Service {

    private static final Logger log = LoggerFactory.getLogger(${className}Service.class);
    @Inject private ${className}Repository ${entityName}Repository;

    public Mono<${className}> save(${className} ${entityName}){
        log.info("Saving  ${className} : {}", ${entityName});
        //TODO insert your logic here!
        //saving Object
        return Mono.from(${entityName}Repository.save(${entityName}));

    }

    public Mono<${className}> findById(long id){
        log.info("Finding ${className} By Id: {}", id);
        return Mono.from(${entityName}Repository.findById(id));
    }


    public Mono<Boolean> deleteById(long id){
        log.info("Deleting ${className} by Id: {}", id);
        try{
            ${entityName}Repository.deleteById(id);
            log.info("Deleted ${className} by Id: {}", id);
            return Mono.just(Boolean.TRUE);
        }
        catch(Exception ex)
        {
            log.info("Failed to delete ${className} by Id: {}", id);
            ex.printStackTrace();
            return Mono.just(Boolean.FALSE);
        }
    }

    public Flux<${className}> findAll() {
        log.info("Find All");
      return Flux.from(${entityName}Repository.findAll());
    }

    public Mono<Boolean> existsById(Long id)
    {
        log.info("Check if id exists: {}", id);
        return  Mono.from(${entityName}Repository.existsById(id));

    }
    public Mono<${className}> update(${className} ${entityName})
    {
        log.info("update {}", ${entityName});
        return Mono.from(${entityName}Repository.update(${entityName}));

    }

}