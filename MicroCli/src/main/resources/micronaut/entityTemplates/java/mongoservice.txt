package ${servicePackage};

<% if(cached) out.print 'import io.micronaut.cache.annotation.*;' %>
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import ${entityPackage};
import ${repoPackage};
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed;' %>
<% print reactor? "import reactor.core.publisher.Flux;" : "import io.reactivex.Flowable;" %>
<% print reactor? "import reactor.core.publisher.Mono;" : "import io.reactivex.Single;" %>
import org.bson.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

<% if(cached) out.print '@CacheConfig("'+ tableName +'")' %>
@Singleton
public class ${className}Service {

    private static final Logger log = LoggerFactory.getLogger(${className}Service.class);

    @Inject private ${className}Repository ${entityName}Repository;


    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.save", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for saving '+entityName+' object")' %>
	public <% print reactor? "Mono" : "Single" %><${className}> save(${className} ${entityName}) {
        log.info("Saving  ${className} : {}", ${entityName});

        //TODO insert your logic here!
        //saving Object

        return ${entityName}Repository.save(${entityName});
    }

    <% if(cached) out.print '@Cacheable' %>
    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.findById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding a '+entityName+' object by id")' %>
    public <% print reactor? "Mono" : "Single" %><${className}> findById(String id){

          log.info("Finding ${className} By Id: {}", id);
          return ${entityName}Repository.findById(id);
    }

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.findAll", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding all '+entityName+' objects")' %>
    public <% print reactor? "Flux" : "Flowable" %><${className}> findAll(){
        log.info("Finding All ${className}");
        return ${entityName}Repository.findAll();
    }

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.deleteById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for deleting a '+entityName+' object by id")' %>
    public <% print reactor? "Mono" : "Single" %><Boolean> deleteById(String id) {
        log.info("Deleting ${className} By Id: {}", id);
	    return ${entityName}Repository.deleteById(id);
	}


    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.update", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for update a '+entityName+' object")' %>
	public <% print reactor? "Mono" : "Single" %><${className}> update(${className} ${entityName})   {
	    log.info("Updating ${className}: {}", ${entityName});
	    return ${entityName}Repository.update(${entityName});
    }

${methods}
}