package ${servicePackage};

<% if(cached) out.print 'import io.micronaut.cache.annotation.*;' %>
import javax.inject.Inject;
import javax.inject.Singleton;
import ${entityPackage};
import ${repoPackage};
import io.reactivex.Flowable;
import io.reactivex.Single;
import org.bson.BsonDocument;
import org.bson.BsonString;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

<% if(cached) out.print '@CacheConfig("'+ tableName +'")' %>
@Singleton
public class ${className}Service {

    private static final Logger log = LoggerFactory.getLogger(${className}Service.class);

    @Inject private ${className}Repository ${entityName}Repository;

	public Single<${className}> save(${className} ${entityName}) {
        log.info("Saving  ${className} : {}", ${entityName});

        //TODO insert your logic here!
        //saving Object

        return ${entityName}Repository.save(${entityName});
    }

    <% if(cached) out.print '@Cacheable' %>
    public Single<${className}> findById(String id){

          log.info("Finding ${className} By Id: {}", id);
          return ${entityName}Repository.findById(id);
    }

     public Flowable<${className}> findAll(){
        log.info("Finding All ${className}");
        return ${entityName}Repository.findAll();
     }

    public Single<Boolean> deleteById(String id) {
        log.info("Deleting ${className} By Id: {}", id);
	    return ${entityName}Repository.deleteById(id);
	}

	public Single<${className}> update(${className} ${entityName})   {
	    log.info("Updating ${className}: {}", ${entityName});
	    return ${entityName}Repository.update(${entityName});
    }


}