package ${repositoryPackage};

import ${entityPackage}.${entityClass};
import ${microstreamPackage}.${entityClass}Data;
import io.micronaut.microstream.RootProvider;
import io.micronaut.microstream.annotations.StoreParams;
import io.micronaut.microstream.annotations.StoreReturn;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;

import java.util.HashMap;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Stream;

@Singleton
public class ${entityClass}Repository{

    @Inject
    RootProvider<${entityClass}Data> rootProvider;

    @Override
    public ${entityClass} save(${entityClass} ${entity}) {
        return save(rootProvider.root().get${entityClass}s(), ${entity});
    }

    @Override
    public void update(String id, ${entityClass} update) {
        update${entityClass}(id, update);
    }

    @Override
    public Optional<${entityClass}> findById(String id) {
        return Optional.ofNullable(rootProvider.root().get${entityClass}s().get(id));
    }
    @Override
    public void deleteById(String id) {
        remove${entityClass}(id);
    }

    public Iterable<${entityClass}> findAll()
    {
       return rootProvider.root().get${entityClass}s().values();
    }
    @StoreParams("${entity}s")
    protected void remove${entityClass}(String id) {
        rootProvider.root().get${entityClass}s().remove(id);

    }

    @StoreParams("${entity}s")
    protected ${entityClass} save(HashMap<String, ${entityClass}> map , ${entityClass} ${entity})
    {
        ${entity}.setId(UUID.randomUUID().toString());
        map.putIfAbsent(${entity}.getId(), ${entity});
        return ${entity};
    }

    @StoreReturn
    protected ${entityClass} update${entityClass}(String id, ${entityClass} update)
    {
        HashMap<String, ${entityClass}> map = rootProvider.root().get${entityClass}s();
        ${entityClass} ${entityClass} = map.get(update.getId());
        if(${entityClass} != null)
        {
            ${entityClass}.setName(update.getName());
            ${entityClass}.setLetter(update.getLetter());
            map.put(${entityClass}.getName(), ${entityClass});
            return ${entityClass};
        }
            return null;
    }

    public boolean existsById(String id){
        return rootProvider.root().getFruits().containsKey(id);
    }

}
