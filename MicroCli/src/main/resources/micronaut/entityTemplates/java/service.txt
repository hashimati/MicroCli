package ${servicePackage};

<% if(cached) out.print 'import io.micronaut.cache.annotation.*;' %>
import javax.inject.Inject;
import javax.inject.Singleton;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.transaction.Transactional;
import ${entityPackage};
import ${repoPackage};

<% if(cached) out.print '@CacheConfig("'+ tableName +'")' %>
@Singleton
@Transactional
public class ${className}Service {

    private static final Logger log = LoggerFactory.getLogger(${className}Service.class);
    @Inject private ${className}Repository ${entityName}Repository;

    public ${className} save(${className} ${entityName}){
        log.info("Saving  ${className} : {}", ${entityName});
        //TODO insert your logic here!
        //saving Object
        ${entityName}Repository.save(${entityName});
        return ${entityName};
    }

    <% if(cached) out.print '@Cacheable' %>
    public ${className} findById(long id){
        log.info("Finding ${className} By Id: {}", id);
        return ${entityName}Repository.findById(id).orElse(null);
    }


    public boolean deleteById(long id){
        log.info("Deleting ${className} by Id: {}", id);
        try{
            ${entityName}Repository.deleteById(id);
            log.info("Deleted ${className} by Id: {}", id);
            return true;
        }
        catch(Exception ex)
        {
            log.info("Failed to delete ${className} by Id: {}", id);
            ex.printStackTrace();
            return false;
        }
    }

    public Iterable<${className}> findAll() {
        log.info("Find All");
      return  ${entityName}Repository.findAll();
    }

    public boolean existsById(Long id)
    {
        log.info("Check if id exists: {}", id);
        return  ${entityName}Repository.existsById(id);

    }
    public ${className} update(${className} ${entityName})
    {
        log.info("update {}", ${entityName});
        return ${entityName}Repository.update(${entityName});

    }

}