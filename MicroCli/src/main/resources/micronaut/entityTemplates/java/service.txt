package ${servicePackage};

<% if(cached) out.print 'import io.micronaut.cache.annotation.*;' %>
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
<% if(principle) out.print 'import java.security.Principal;' %>
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed;' %>
import javax.transaction.Transactional;
import ${entityPackage};
import ${repoPackage};
${moreImports}

<% if(cached) out.print '@CacheConfig("'+ tableName +'")' %>
<% if(transactional) out.print '@Transactional'%>
@Singleton
public class ${className}Service {

    private static final Logger log = LoggerFactory.getLogger(${className}Service.class);
    @Inject private ${className}Repository ${entityName}Repository;

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.save", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for saving '+entityName+' object")' %>
    public ${className} save(${className} ${entityName}if(principle) out.print ', Principle principle'%> <% if(header) out.print ',  String authorization'%>){
        log.info("Saving  ${className} : {}", ${entityName});
        //TODO insert your logic here!
        //saving Object
        ${entityName}Repository.save(${entityName});
        return ${entityName};
    }

    <% if(cached) out.print '@Cacheable' %>
    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.findById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding a '+entityName+' object by id")' %>
    public ${className} findById(${idType} idif(principle) out.print ', Principle principle'%> <% if(header) out.print ',  String authorization'%>){
        log.info("Finding ${className} By Id: {}", id);
        return ${entityName}Repository.findById(id).orElse(null);
    }

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.deleteById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for deleting a '+entityName+' object by id")' %>
    public boolean deleteById(${idType} idif(principle) out.print ', Principle principle'%> <% if(header) out.print ',  String authorization'%>){
        log.info("Deleting ${className} by Id: {}", id);
        try{
            ${entityName}Repository.deleteById(id);
            log.info("Deleted ${className} by Id: {}", id);
            return true;
        }
        catch(Exception ex)
        {
            log.info("Failed to delete ${className} by Id: {}", id);
            ex.printStackTrace();
            return false;
        }
    }

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.findAll", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding all '+entityName+' objects")' %>
    public Iterable<${className}> findAll(if(principle) out.print 'Principle principle'%> <% if(header) out.print ',  String authorization'%>) {
        log.info("Find All");
      return  ${entityName}Repository.findAll();
    }

    public boolean existsById(${idType} idif(principle) out.print ', Principle principle'%> <% if(header) out.print ',  String authorization'%>)
    {
        log.info("Check if id exists: {}", id);
        return  ${entityName}Repository.existsById(id);

    }

    <% if(micrometer) out.print '@Timed(value = "'+servicePackage+'.'+entityName+'Service.update", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for update a '+entityName+' object")' %>
    public ${className} update(${className} ${entityName}if(principle) out.print ', Principle principle'%> <% if(header) out.print ',  String authorization'%>)
    {
        log.info("update {}", ${entityName});
        return ${entityName}Repository.update(${entityName});

    }
${methods}
}