package ${controllerPackage};

import com.fasterxml.jackson.core.JsonProcessingException;

import io.micronaut.context.annotation.Parameter;
import io.micronaut.core.version.annotation.Version;
import io.micronaut.http.annotation.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed;' %>
<% if(micrometer) out.print 'import io.micronaut.tracing.annotation.NewSpan;' %>
<% if(micrometer) out.print 'import io.micronaut.tracing.annotation.SpanTag;' %>
import jakarta.inject.Inject;

import ${entityPackage};
import ${servicePackage};


@Controller("/api/${entities}")
public class ${className}Controller {

    private static final Logger log = LoggerFactory.getLogger(${className}Controller.class);

    @Inject private ${className}Service ${entityName}Service;


    @Post("/save")
    @Version("1")
    <% if(micrometer) out.print '@NewSpan("${appName}")'%>
    <% if(micrometer) out.print '@Timed(value = "${controllerPackage}.${entityName}.save", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for saving ${entityName} object")' %>
    @Operation(summary = "Creating a ${entityName} and Storing in the database",
            description = "A REST service, which saves ${className} objects to the database.",
            operationId = "Save${className}"
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Object Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not stored")
    public ${className} save(@Body ${className} ${entityName}){
        log.info("Saving  ${className} : {}", ${entityName});
        //TODO insert your logic here!

        //saving Object
        return ${entityName}Service.save(${entityName});
    }


    @Get("/get")
    @Version("1")
    <% if(micrometer) out.print '@NewSpan("${appName}")'%>
    <% if(micrometer) out.print '@Timed(value = "${controllerPackage}.${entityName}.findById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding a ${entityName} object by id")' %>
    @Operation(summary = "Getting a ${entityName} by Id",
        description = "A REST service, which retrieves a ${className} object by Id.",
        operationId = "FindById${className}"
    )
    @ApiResponse(
        content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Id Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not found")
    public ${className} findById(@Parameter("id") long id){
        return ${entityName}Service.findById(id);
    }

    @Delete("/delete/{id}")
    @Version("1")
    <% if(micrometer) out.print '@NewSpan("${appName}")'%>
    <% if(micrometer) out.print '@Timed(value = "${controllerPackage}.${entityName}.deleteById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for deleting a ${entityName} object by id")' %>
    @Operation(summary = "Deleting a ${entityName} by ID",
            description = "A REST service, which deletes ${className} object from the database.",
            operationId = "DeleteById${className}"
    )
    @ApiResponse(
            content = @Content(mediaType = "boolean")
    )
    @ApiResponse(responseCode = "400", description = "Invalid Id Supplied")
    @ApiResponse(responseCode = "404", description = "${className} not found")
    public boolean deleteById(@PathVariable("id") long id){
        log.info("Deleting ${className} by Id: {}", id);
        return  ${entityName}Service.deleteById(id);
    }

    @Get("/findAll")
    @Version("1")
    <% if(micrometer) out.print '@NewSpan("${appName}")'%>
    <% if(micrometer) out.print '@Timed(value = "${controllerPackage}.${entityName}.findAll", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding all ${entityName} objects")' %>
    @Operation(summary = "Retrieving all ${entityName} objects as Json",
            description = "A REST service, which returns all ${className} objects from the database.",
            operationId = "FindAll${className}"
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    public Iterable<${className}> findAll(){
        log.info("find All");
        return ${entityName}Service.findAll();
    }

    @Put("/update")
    @Version("1")
    <% if(micrometer) out.print '@NewSpan("${appName}")'%>
    <% if(micrometer) out.print '@Timed(value = "${controllerPackage}.${entityName}.update", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for update a ${entityName} object")' %>
    @Operation(summary = "Updating a ${entityName}.",
            description = "A REST service, which update a ${className} objects to the database.",
            operationId = "Update${className}"
    )
    @ApiResponse(
            content = @Content(mediaType = "application/json")
    )
    @ApiResponse(responseCode = "404", description = "${className} not found")
    public ${className} update(@Body ${className} ${entityName})
    {
        log.info("update {}", ${entityName});
        return ${entityName}Service.update(${entityName});

    }


}

