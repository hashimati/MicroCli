package ${clientPackage};


import io.micronaut.context.annotation.Parameter;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.annotation.Client;
import jakarta.inject.Inject;
<% print reactor? "import reactor.core.publisher.Flux;" : "import io.reactivex.Flowable;" %>
<% print reactor? "import reactor.core.publisher.Mono;" : "import io.reactivex.Single;" %>
import ${entityPackage};
${moreImports}

@Client("/api/v1/${entities}")
public interface ${classNameA}Client {

    @Post("/save")
    public <% print reactor? "Mono" : "Single" %><${className}> save(${classNameA} ${entityName}<% if(header) out.print ', @Header("Authorization") String authorization'%>);

    @Get("/get")
    public <% print reactor? "Mono" : "Single" %><${className}> findById(@Parameter("id") String id<% if(header) out.print ', @Header("Authorization") String authorization'%>);

    @Delete("/delete/{id}")
    public boolean deleteById(@PathVariable("id") String id<% if(header) out.print ', @Header("Authorization") String authorization'%>);

    @Get("/findAll")
    public <% print reactor? "Flux" : "Flowable" %><${className}> findAll(<% if(header) out.print '@Header("Authorization") String authorization'%>);

    @Put("/update")
    public <% print reactor? "Mono" : "Single" %><${className}> update(@Body ${className} ${entityName}<% if(header) out.print ', @Header("Authorization") String authorization'%>);
}

