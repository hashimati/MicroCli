package ${pack};

import graphql.kickstart.tools.GraphQLMutationResolver;
import graphql.kickstart.tools.GraphQLQueryResolver;
import ${domainPackage}.${className};
import ${servicePackage}.${className}Service;
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed;' %>

import jakarta.inject.Inject;
import jakarta.inject.Singleton;

@Singleton
public class ${className}QueryResolver implements GraphQLQueryResolver, GraphQLMutationResolver {
    @Inject
    private ${className}Service ${entityName}Service;

    <% if(micrometer) out.print '@Timed(value = "'+pack+'.QueryResolver.save.findById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding a '+entityName+' object by id")' %>
    public ${className} find${className}ById(long id)
    {
        return ${entityName}Service.findById(id);
    }

    <% if(micrometer) out.print '//@Timed(value = "'+pack+'.'+className+'QueryResolver.findAll", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding all '+entityName+' objects")' %>
    public Iterable<${className}> findAll${className}()
    {
        return ${entityName}Service.findAll();
    }

    <% if(micrometer) out.print '@Timed(value = "'+pack+'.'+className+'QueryResolver.save", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for saving '+entityName+' object")' %>
    public ${className} save${className}(${className} ${entityName}){
        return ${entityName}Service.save(${entityName});
    }

    <% if(micrometer) out.print '@Timed(value = "'+pack+'.'+className+'QueryResolver.update", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for update a '+entityName+' object")' %>
    public ${className} update${className}(${className} ${entityName})
    {
        return  ${entityName}Service.update(${entityName});

    }

    <% if(micrometer) out.print '@Timed(value = "'+pack+'.'+className+'QueryResolver.deleteById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for deleting a '+entityName+' object by id")' %>
    public boolean delete${className}(long id){
      return ${entityName}Service.deleteById(id);
    }

}