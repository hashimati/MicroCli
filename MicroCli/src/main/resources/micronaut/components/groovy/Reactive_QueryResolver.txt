package ${pack}

import graphql.kickstart.tools.GraphQLMutationResolver
import graphql.kickstart.tools.GraphQLQueryResolver
import ${domainPackage}.${className}
import ${servicePackage}.${className}Service

import jakarta.inject.Inject
import jakarta.inject.Singleton

@Singleton
class ${className}QueryResolver implements GraphQLQueryResolver, GraphQLMutationResolver {

    @Inject
    ${className}Service ${entityName}Service
    ${className} find${className}ById(long id)
    {
        return ${entityName}Service.findById(id).<% print reactor? "block" : "blockingGet" %>()
    }

    Iterable<${className}> findAll${className}()
    {
        return ${entityName}Service.findAll().<% print reactor? "toIterable" : "blockingIterable" %>()
    }

    ${className} save${className}(${className} ${entityName}){
        return ${entityName}Service.save(${entityName}).<% print reactor? "block" : "blockingGet" %>();
    }
    ${className} update${className}(${className} ${entityName})
    {
        return  ${entityName}Service.update(${entityName}).<% print reactor? "block" : "blockingGet" %>();

    }
    boolean delete${className}(long id){
      return ${entityName}Service.deleteById(id).<% print reactor? "block" : "blockingGet" %>();
    }

}