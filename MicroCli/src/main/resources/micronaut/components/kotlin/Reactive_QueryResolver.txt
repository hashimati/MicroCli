package ${pack};

import graphql.kickstart.tools.GraphQLMutationResolver
import graphql.kickstart.tools.GraphQLQueryResolver
import ${domainPackage}.${className}
import ${servicePackage}.${className}Service

import javax.inject.Singleton;

@Singleton
class ${className}QueryResolver(private val ${entityName}Repository :${className}Repository)  : GraphQLQueryResolver, GraphQLMutationResolver{

    fun find${className}ById(id: Long): ${className}
    {
        return ${entityName}Service.findById(id).get().blockingGet();
    }
    fun findAll${className}() : Iterable<${className}>
    {
            return ${entityName}Service.findAll().blockingIterable()     ;
    }
    fun save${className}(${entityName}: ${className}):${className}{
        return ${entityName}Service.save(${entityName}).blockingGet();
    }
    fun update${className}(${entityName}: ${className} ):${className}
    {
        return  ${entityName}Service.update(${entityName}).blockingGet();
    }
    fun delete${className}(id: Long) : Boolean{
      return ${entityName}Service.deleteById(id).blockingGet();
    }
}