package ${mainPackage};


import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.Bucket;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import io.micronaut.http.MediaType;
import io.micronaut.http.server.types.files.StreamedFile;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

@Singleton
class FileService(private val amzaonS3:AmazonS3) {

    fun createBucket(var bucketName: String): Bucket
    {
        return amazonS3.createBucket(bucketName);
    }


    @Throws(IOException::class)
    fun createFile( var bucket:String, var filePath: String)  {


        if(!amazonS3.doesBucketExistV2(bucket))
         { 
            createBucket(bucket);
         }
        File file = File(filePath);

        ObjectMetadata metaData =  ObjectMetadata();
        metaData.setContentLength(file.length());
        amazonS3.putObject(bucket, file.getName(),  FileInputStream(file), metaData);
    }

    @Throws(IOException::class)
    fun createFile(bucket:String, key:String, inputStream:InputStream,  objectMetadata:ObjectMetadata):String {
          if (!amazonS3.doesBucketExistV2(bucket))
              createBucket(bucket);

         return  amazonS3.putObject(bucket, key, inputStream, objectMetadata) == null? "Failed": "Success";

    }



    fun deleteFile(bucket:String, key:String):String{

        try{
            amazonS3.deleteObject(bucket, key);
            return "Success";
        }
        catch(ex:Exception )
        {
            ex.printStackTrace();
            return "Failed";

        }
    }

    public String deleteBucket(String bucket)
    {

        if( amazonS3.doesBucketExistV2(bucket))
        {
            amazonS3.listObjects(bucket).getObjectSummaries().stream().map(s->s.getKey())
                    .forEach(x->deleteFile(bucket, x));
            amazonS3.deleteBucket(bucket);
            return "Success";
        }
        else {return "Failed"; }
    }
    public StreamedFile OutputStreamFile(String bucket, String key, String filename)
    {
        S3Object s3Object = amazonS3.getObject(bucket, key);
        S3ObjectInputStream inputStream = s3Object.getObjectContent();
        return  StreamedFile(inputStream,MediaType.forFilename(filename));
    }
}
