package ${clientPackage}



import io.micronaut.context.annotation.Parameter
import io.micronaut.http.annotation.*
import io.micronaut.http.client.annotation.Client
import jakarta.inject.Inject
import ${entityPackage}
${moreImports}
<% if (reactor) out.print 'import reactor.core.publisher.Flux' %><% if(rxjava2) out.print 'import io.reactivex.Flowable'%><% if(rxjava3) out.print 'import io.reactivex.core.rxjava3.Flowable'%>
<% if (reactor) out.print 'import reactor.core.publisher.Mono' %><% if(rxjava2) out.print 'import io.reactivex.Single'%><% if(rxjava3) out.print 'import io.reactivex.core.rxjava3.Single'%>
import io.micronaut.http.MediaType
import io.micronaut.http.multipart.CompletedFileUpload
<% if(pageable) out.print 'import io.micronaut.data.model.Page' %>
<% if(pageable) out.print 'import io.micronaut.data.model.Pageable' %>
${containDate?'import java.time.Instant':''}
${containBigInteger?'import java.math.BigInteger':''}
${containBigDecimal?'import java.math.BigDecimal':''}
@Client("/api/v1/${entities}")
interface ${classNameA}Client {

    @Post("/save")
    fun save(${entityName}:${classNameA}<% if(header) out.print ', @Header("Authorization") authorization:String '%>): ${className}

    @Get("/get")
    fun findById(@Parameter("id") id:${idType}<% if(header) out.print ', @Header("Authorization") authorization:String '%>): ${className}

    @Delete("/delete/{id}")
    fun deleteById(@PathVariable("id") id: ${idType}<% if(header) out.print ', @Header("Authorization") authorization:String '%>): Boolean

    @Get("/findAll")
    fun findAll(<% if(pageable) out.print 'pageable:Pageable' %><% if(pageable && header) out.print ', ' %><% if(header) out.print ',  @Header("Authorization") authorization:String '%>):<% if(pageable) out.print 'Page' %><% if(!pageable) out.print 'Iterable' %><${className}><${className}>

    @Put("/update")
    fun update(@Body ${entityName}: ${className}<% if(header) out.print ', @Header("Authorization") authorization:String '%>):${className}

${methods}
}

