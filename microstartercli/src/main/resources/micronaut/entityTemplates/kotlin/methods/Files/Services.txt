
    @Timed(value = "${mainPackage}.${entity}Service.upload${attributeCap}", percentiles = { 0.5, 0.95, 0.99 }, description = "Uploading ${attributeCap} file")
    fun upload${attributeCap}(${idType} id, CompletedFileUpload file):String
    {

        String path = System.getProperty("user.dir")+"/"+file.getFilename()
        ${entityCap} ${entity} = ${entity}Repository.findById(id)${block}
        ${entity}.set${attributeCap}(path)
        ${entityCap} updateResult = ${entity}Repository.update(${entity})${updateBlock}
        if(!updateResult.get${attributeCap}().equals(path)) return "Failed"
        String saveResult = fileService.save(file, path)
        return saveResult
    }
    @Timed(value = "${mainPackage}.${entity}Service.download${attributeCap}", percentiles = { 0.5, 0.95, 0.99 }, description = "Downloading ${attributeCap} file")
    fun download${attributeCap}(id:${idType}) :io.micronaut.http.server.types.files.StreamedFile {
         try {
             return io.micronaut.http.server.types.files.StreamedFile(fileService.readFile(
                     ${entity}Repository.findById(id)${block}.get${attributeCap}()
             ).toURI().toURL())
         } catch ( e:Exception) {
             throw RuntimeException(e)
         }
     }

    @Timed(value = "${mainPackage}.${entity}Service.delete${attributeCap}", percentiles = { 0.5, 0.95, 0.99 }, description = "Deleting ${attributeCap} file")
    fun  delete${attributeCap}(id:${idType} ):String
    {
        ${entityCap} ${entity} = ${entity}Repository.findById(id)${block}
        ${entity}.set${attributeCap}("")
        ${entity}Repository.update(${entity})${updateBlock}
        return fileService.deleteFile(${entity}.get${attributeCap}())
    }