package ${clientPackage}



import io.micronaut.context.annotation.Parameter
import io.micronaut.http.annotation.*
import io.micronaut.http.client.annotation.Client
import jakarta.inject.Inject
import io.micronaut.http.MediaType
import io.micronaut.http.multipart.CompletedFileUpload
<% if (reactor) out.print 'import reactor.core.publisher.Flux' %><% if(rxjava2) out.print 'import io.reactivex.Flowable'%><% if(rxjava3) out.print 'import io.reactivex.core.rxjava3.Flowable'%>
<% if (reactor) out.print 'import reactor.core.publisher.Mono' %><% if(rxjava2) out.print 'import io.reactivex.Single'%><% if(rxjava3) out.print 'import io.reactivex.core.rxjava3.Single'%>
${moreImports}
import ${entityPackage}
${containDate?'import java.time.Instant':''}
${containBigInteger?'import java.math.BigInteger':''}
${containBigDecimal?'import java.math.BigDecimal':''}

@Client("/api/v1/${entities}")
interface ${classNameA}Client {

    @Post("/save")
    <% print reactor? "Mono" : "Single" %><${className}> save(@Body ${classNameA} ${entityName}<% if(header) out.print ', @Header("Authorization") String authorization'%>)

    @Get("/get")
    <% print reactor? "Mono" : "Single" %><${className}> findById(@Parameter("id") String id<% if(header) out.print ', @Header("Authorization") String authorization'%>)

    @Delete("/delete/{id}")
    <% print reactor? "Mono" : "Single" %><Boolean> deleteById(@PathVariable("id") String id<% if(header) out.print ', @Header("Authorization") String authorization'%>)

    @Get("/findAll")
    <% print reactor? "Flux" : "Flowable" %><${className}> findAll(<% if(header) out.print '@Header("Authorization") String authorization'%>)


    @Put("/update")
    <% print reactor? "Mono" : "Single" %><${className}> update(@Body ${className} ${entityName}<% if(header) out.print ', @Header("Authorization") String authorization'%>)
${methods}
}

