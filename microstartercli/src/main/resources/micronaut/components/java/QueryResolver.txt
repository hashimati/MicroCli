package ${pack};

import graphql.kickstart.tools.GraphQLMutationResolver;
import graphql.kickstart.tools.GraphQLQueryResolver;
import ${domainPackage}.${className};
import ${servicePackage}.${className}Service;
<% if(pageable) out.print 'import io.micronaut.data.model.Page;' %>
<% if(pageable) out.print 'import io.micronaut.data.model.Pageable;' %>
<% if(micrometer) out.print 'import io.micrometer.core.annotation.Timed;' %>
<% if(principal) out.print 'import io.micronaut.security.utils.DefaultSecurityService;' %>
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
${moreImports}
${containDate?'import java.time.Instant;':''}
${containBigInteger?'import java.math.BigInteger;':''}
${containBigDecimal?'import java.math.BigDecimal;':''}

@Singleton
public class ${className}QueryResolver implements GraphQLQueryResolver, GraphQLMutationResolver {
    @Inject
    private ${className}Service ${entityName}Service;

    <% if(principal) out.print '@Inject private DefaultSecurityService defaultSecurityService;' %>

    <% if(micrometer) out.print '@Timed(value = "'+pack+'.QueryResolver.save.findById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding a '+entityName+' object by id")' %>
    public ${className} find${className}ById(${idType} id)
    {
        return ${entityName}Service.findById(id<% if(principal) out.print ', defaultSecurityService.getAuthentication().orElse(null)'%><% if(header) out.print ', ""' %>);
    }

    <% if(micrometer) out.print '//@Timed(value = "'+pack+'.'+className+'QueryResolver.findAll", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for finding all '+entityName+' objects")' %>
    public Iterable<${className}> findAll${className}(<% if(pageable) out.print 'Pageable pageable' %>)
    {
        return ${entityName}Service.findAll(<% if(pageable) out.print 'pageable' %><% if(pageable && principal) out.print ', ' %><% if(principal) out.print 'defaultSecurityService.getAuthentication().orElse(null)' %><% if(header) out.print ', ""' %>);
    }

    <% if(micrometer) out.print '@Timed(value = "'+pack+'.'+className+'QueryResolver.save", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for saving '+entityName+' object")' %>
    public ${className} save${className}(${className} ${entityName}){
        return ${entityName}Service.save(${entityName}<% if(principal) out.print ', defaultSecurityService.getAuthentication().orElse(null)'%><% if(header) out.print ', ""' %>);
    }

    <% if(micrometer) out.print '@Timed(value = "'+pack+'.'+className+'QueryResolver.update", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for update a '+entityName+' object")' %>
    public ${className} update${className}(${className} ${entityName})
    {
        return  ${entityName}Service.update(${entityName}<% if(principal) out.print ', defaultSecurityService.getAuthentication().orElse(null)'%><% if(header) out.print ', ""' %>);

    }

    <% if(micrometer) out.print '@Timed(value = "'+pack+'.'+className+'QueryResolver.deleteById", percentiles = { 0.5, 0.95, 0.99 }, description = "Observing all service metric for deleting a '+entityName+' object by id")' %>
    public boolean delete${className}(${idType} id){
      return ${entityName}Service.deleteById(id<% if(principal) out.print ', defaultSecurityService.getAuthentication().orElse(null)'%><% if(header) out.print ', ""' %>);
    }

${methods}

}